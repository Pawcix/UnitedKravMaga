.navbar{position:fixed;width:100%;top:0;font-size:18px;background-color:rgba(2,2,2,.7960784314)}.navbar__logo{width:400px;height:90px;background-position:50%;background-repeat:no-repeat;background-image:url(/dist/img/UnitedKravMagaLogo.png);transform:scale(.75) translateX(-60px)}.navbar__box{display:flex;justify-content:space-between;align-items:center}.navbar__list{display:flex;gap:20px}.navbar__list li a{position:relative;color:#fff;text-transform:uppercase;letter-spacing:1px}.navbar__list li a:hover{color:#00aeef}.navbar__list li a:after{content:"";position:absolute;bottom:-5px;left:0;width:100%;height:3px;transform:scaleX(0);transform-origin:right;background-color:#00aeef;transition:transform .5s}.navbar__list li a:hover:after{transform:scaleX(1);transform-origin:left}.navbar__toggle{display:none}.navbar__icon{width:40px;height:35px;display:flex;justify-content:space-between;align-items:center;flex-direction:column}.navbar__icon .bar{margin:3px 0;width:40px;height:3px;background-color:#fff}@media (max-width:1000px){.navbar{font-size:26px;background-color:transparent;z-index:2}.navbar__logo{width:120px;height:90px;background-position:50%;background-repeat:no-repeat;background-image:url(/dist/img/UnitedKravMagaIcon.png);transform:scale(.75) translateX(-20px);z-index:1}.navbar__list{position:absolute;display:none;justify-content:center;align-items:center;flex-direction:column;width:100%;height:100vh;top:0;right:0;bottom:0;left:0;background:rgba(2,2,2,.8509803922)}.navbar__toggle{display:block;z-index:1}.navbar__list li{text-align:center;margin:0}.navbar .show{display:flex}.navbar .burger-icon.active .bar:first-child{transform:rotate(-45deg) translate(-6px,7px);background-color:#00aeef}.navbar .burger-icon.active .bar:nth-child(2){opacity:0}.navbar .burger-icon.active .bar:nth-child(3){transform:rotate(45deg) translate(-6px,-7px)}}.footer a{color:#fff}.footer a:hover{color:#00aeef}.footer__info{padding:25px 0;background-color:#070707}.footer__box{display:flex;justify-content:space-between;align-items:center;flex-direction:row}.footer__menu{justify-content:flex-start;align-items:flex-start;gap:5px;font-size:18px}.footer__logos,.footer__menu{display:flex;flex-direction:column}.footer__logos{justify-content:center;align-items:center}.footer__logos--google{transform:scale(.6)}.footer__logos--united{transform:scale(.75)}.footer__contact{display:flex;justify-content:flex-end;align-items:flex-end;flex-direction:column;text-align:end;gap:5px;transition:all .3s}.footer__contact--icons{font-size:36px}.footer__contact--icons:hover{color:#00aeef;transform:scale(1.2)}.footer__author{padding:15px 0;text-align:center;color:#fff;background-color:#020202}.footer__author--author{display:flex;justify-content:center;align-items:center}.footer__author--author span{font-size:16px}@media (max-width:1000px){.footer .footer__box{flex-direction:column;gap:20px 0}.footer .footer__contact,.footer .footer__menu{justify-content:center;align-items:center}.footer .footer__author--author span{font-size:12px}}@media (max-width:450px){.footer .footer__author--author span [data-author=author]{display:block}}.record__section{display:grid;gap:30px}.record__img{display:flex;transition:all .3s;padding:20px}.record__img img{width:100%;height:369px;border:10px double #00aeef;border-radius:10px;overflow:hidden;transition:all .3s}.record__img [data-img=sample]:hover{transform:scale(1.05) rotate(-5deg)}.record__img [data-img=reverse]:hover{transform:scale(1.05) rotate(5deg)}.record__box{display:flex;flex-direction:row}.record__reverse{display:flex;flex-direction:row-reverse}.record__text{display:flex;justify-content:space-between;flex-direction:column;padding:20px}.record__text--boxes{gap:20px}@media (max-width:1000px){.record__img{padding:10px}.record__img img{width:100%;height:300px}.record__text{padding:10px}.record__box,.record__reverse{flex-direction:column}}.contact__box{align-items:center;flex-direction:row}.contact__box,.contact__data{display:flex;justify-content:center}.contact__data{flex-direction:column;gap:35px}.contact__data .button{align-items:center;gap:20px}.contact__boxes,.contact__data .button{display:flex;justify-content:flex-start}.contact__boxes{flex-direction:column}.contact__boxes span{padding:3px 0}.contact__boxes span a{position:relative;text-decoration:none}.contact__boxes span a:hover{color:#00aeef}.contact__boxes span a:after{content:"";position:absolute;bottom:-5px;left:0;width:100%;height:3px;transform:scaleX(0);transform-origin:right;background-color:#00aeef;transition:transform .5s}.contact__boxes span a:hover:after{transform:scaleX(1);transform-origin:left}.contact__map{display:flex;justify-content:center;flex-direction:center;height:294px;border:10px double #00aeef;border-radius:10px;overflow:hidden}@media (max-width:1000px){.contact .contact__box{flex-direction:column;gap:35px}.contact .contact__data{gap:25px}.contact .contact__data .button{justify-content:center}}.navbar,.z-index{z-index:1}@media screen and (max-width:1000px){.contact .heading,.diagram .heading,.gallery .heading,.record .heading{height:250px}.contact .heading h2,.diagram .heading h2,.gallery .heading h2,.record .heading h2{font-size:38px}}.section-box{position:relative;top:-50px;width:100%;padding:40px 60px;border-radius:20px;color:#7a7a7a;background-color:#fff;box-shadow:5px 5px 5px rgba(0,0,0,.15)}@media (max-width:1000px){.section-box{padding:16px}}.section-bgc{background-color:#d9d9d9}.z-index{z-index:1}.heading{display:flex;justify-content:center;align-items:center;width:100%;height:300px;margin-top:106px;background:linear-gradient(0deg,#007caa,#00aeef)}.wrapper{margin:0 auto;width:100%;max-width:1400px;padding:0 20px}@media (max-width:1000px){.wrapper{padding:0 10px}}.font-family-ubuntu{font-family:Ubuntu,sans-serif}.background-color-transparent{background-color:transparent}*,:after,:before{box-sizing:border-box;margin:0;padding:0}body,html{height:100%;font-family:Poppins,sans-serif;color:#7a7a7a;background-color:#070707}html{scroll-behavior:smooth;-moz-user-select:none;user-select:none;-webkit-user-select:none}a{text-decoration:none;color:#fff;color:#7a7a7a;transition:all .3s}button,input,select,textarea{font-family:inherit}button{border:none;cursor:pointer}textarea{resize:vertical}table{border-collapse:collapse;border-spacing:0}ul li{list-style:none}ol,ul{padding-left:0!important}li{transition:.3s}li:hover{color:#00aeef}dl,ol,ul{margin-bottom:0!important}span{font-size:18px}@media (max-width:1000px){span{font-size:16px}}h2{margin-bottom:55px;font-size:50px;color:#fff;text-shadow:2px 2px 5px #000}h2,h3{font-weight:600}h3{font-size:36px;color:#00aeef}@media (max-width:1000px){h3{font-size:24px}}button{padding:15px 30px;font-size:18px;font-weight:600;text-transform:uppercase;color:#fff;border-radius:8px;border:2px solid #00aeef;background-color:#00aeef;transition:all .3s}button:hover{color:#00aeef;background-color:#fff;transform:scale(1.1)}@media (max-width:1000px){button{padding:10px 20px;font-size:16px}}.reverse{color:#00aeef;background-color:transparent}.reverse:hover{color:#fff;background-color:#00aeef;transform:scale(1.1)}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
